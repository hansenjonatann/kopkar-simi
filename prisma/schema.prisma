// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  username  String
  password  String
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WholesalerUnit {
  id        String   @id @default(uuid())
  name      String
  slug      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]
}

model RetailUnit {
  id   String @id @default(uuid())
  name String
  slug String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]
}

model Product {
  id              String         @id @default(uuid())
  name            String
  code            String
  description     String?
  price           Int            @default(0)
  cost            Int            @default(0)
  stock           Int            @default(0)
  retailStock     Int            @default(0)
  wholesaleStock  Int            @default(0)
  retailunitId    String
  retailUnit      RetailUnit     @relation(fields: [retailunitId], references: [id])
  wholesaleunitId String
  wholesaleUnit   WholesalerUnit @relation(fields: [wholesaleunitId], references: [id])
  categoryId      String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  category      Category       @relation(fields: [categoryId], references: [id])
  SaleItems     SaleItem[]
  InventoryLogs InventoryLog[]
}

model Category {
  id          String   @id @default(uuid())
  name        String
  slug        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  products Product[]
}

model Customer {
  id               String   @id @default(uuid())
  customerCode     String
  name             String
  nik              String
  address          String
  phone            String
  department       String
  transactionLimit Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  sales    Sale[]
  loans    Loan[]
  savings  PrincipalSavings[]
  payments Payment[]
}

model PrincipalSavings {
  id             String   @id @default(uuid())
  customerId     String
  customer       Customer @relation(fields: [customerId], references: [id])
  saveDate       String
  nominalSavings Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Sale {
  id          String        @id @default(uuid())
  customerId  String
  customer    Customer      @relation(fields: [customerId], references: [id])
  date        String
  discount    Int?
  subtotal    Int
  total       Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  transaction Transaction[]
  SaleItems   SaleItem[]
}

model Transaction {
  id            Int           @id @default(autoincrement())
  saleId        String
  paymentAmount Int
  change        Int
  paymentmethod PaymentMethod
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  Sale Sale @relation(fields: [saleId], references: [id])
}

model Loan {
  id                   String     @id @default(uuid())
  loanCode             String
  customerId           String
  customer             Customer   @relation(fields: [customerId], references: [id])
  loanDate             String
  dueDate              String
  typeofLoan           TypeOfLoan
  interestRate         Decimal
  interestPerMonth     Int
  totalInterest        Int
  loanAmount           Int
  installment          Int
  principalInstallment Int
  totalLoan            Int
  totalInstallment     Int
  duration             Int
  status               Status     @default(PENDING)
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt

  totalPaid          Int        @default(0)
  accruedInterest    Int        @default(0)
  remainingPrincipal Int        @default(0)
  isPaidOff          PaidStatus @default(UNPAID)

  payment      Payment[]
  interestLogs AccruedInterestLog[]
}

model Payment {
  id            String   @id @default(uuid())
  customerId    String
  customer      Customer @relation(fields: [customerId], references: [id])
  paymentDate   DateTime
  loanId        String
  loan          Loan     @relation(fields: [loanId], references: [id])
  paymentAmount Int // nominal yang dibayarkan user
  interestRate  Float // bunga berjalan, misalnya 0.03 (3%)
  totalInterest Int
  totalDue      Int // paymentAmount + bunga berjalan
  penalty       Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model AccruedInterestLog {
  id        String   @id @default(uuid())
  loanId    String
  loan      Loan     @relation(fields: [loanId], references: [id])
  date      DateTime
  amount    Int
  note      String?
  createdAt DateTime @default(now())
}

enum Status {
  APPROVE
  DECLINE
  PENDING
}

enum PaidStatus {
  UNPAID
  PAID
}

model SaleItem {
  id        String @id @default(uuid())
  saleId    String
  productId String
  quantity  Int    @default(1)
  unitPrice Int    @default(0)

  Sale    Sale    @relation(fields: [saleId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model InventoryLog {
  id         Int        @id @default(autoincrement())
  productId  String
  changeType ChangeType
  quantity   Int
  note       String?
  createdAt  DateTime   @default(now())
  date       String

  Product Product @relation(fields: [productId], references: [id])
}

enum ChangeType {
  PURCHASE
  SALE
  ADJUSTMENT
}

enum PaymentMethod {
  CASH
  CARD
  DIGITAL
}

enum Role {
  ADMIN
  CASHIER
  MANAGER
  ADMIN_LOANANDSAVINGS
}

enum TypeOfLoan {
  RF
  SPT_AND_MANAGER
}
